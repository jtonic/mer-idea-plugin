import org.jetbrains.intellij.tasks.RunIdeTask

buildscript {

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url = new URI("https://plugins.gradle.org/m2/")
        }
    }

    dependencies {
        classpath(("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"))
        classpath(("org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion"))
        classpath(("org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"))
        classpath(("gradle.plugin.org.jetbrains.intellij.plugins:gradle-intellij-plugin:$intellijPluginVersion"))
        classpath("de.undercouch:gradle-download-task:$gradleDownloadTask")
    }
}

group = groupId
version = versionNumber

apply plugin: "java"
apply plugin: "idea"
apply plugin: "maven"
apply plugin: "kotlin"
apply plugin: "kotlin-allopen"
apply plugin: "kotlin-noarg"
apply plugin: "org.jetbrains.intellij"
apply plugin: "de.undercouch.download"

project.ext.offline = project.findProperty("offline")
logger.quiet("offline = ${project.offline ?: false}")
project.ext.ideaIC = "ideaIC-${ideaICVersion}"

apply from: "gradle/prepareIdea.gradle"

dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion") {
        force = true
    }
    compile("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion") {
        force = true
    }
    compile("io.kotlintest:kotlintest:$kotlinTestVersion") {
        exclude group: "org.jetbrains.kotlin", module: "kotlin-reflect"
        exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib"
    }
    compile("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinCoroutinesVersion")

    testCompile("org.testng:testng:$testNgVersion")
}

compileJava {
    sourceCompatibility = 1.8
}

[compileKotlin, compileTestKotlin]*.configure {
    kotlinOptions {
        suppressWarnings = true
        languageVersion = kotlinLanguageVersion
        apiVersion = kotlinApiVersion
        jvmTarget = kotlinJvmTarget
        javaParameters = true
        incremental = true
        freeCompilerArgs = ["-Xjsr305=strict", "-Xjvm-default=enable"]
    }
}


intellij {

    type = 'IC' // IU | JPS | JPS | RS | RD   - IC is the default
    
    pluginName = "Merak"
    // The kotlin idea plugin versions -> https://plugins.jetbrains.com/plugin/6954-kotlin
    downloadSources = false
//    plugins = ["Kotlin", "maven", "gradle"]
    plugins = ["org.jetbrains.kotlin:$kotlinVersion-release-IJ2018.2-1", "maven", "gradle"]

    // for IntelliJ Idea build numbers see
    // https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html

    // uncomment version and comment out the localPath to fetch the IDE from jetbrains REPO.
    // Jetbrains product releases -> https://www.jetbrains.com/intellij-repository/releases
    // 181.4203.550 -> 2018.1
    if (project.offline) {
        // MAC-OS
        localPath = "lib/ideaIC/$ideaIC"
        // Windows
        // version "IC-181.4445.78"
        // localPath "/Users/antonelpazargic/Library/Application Support/JetBrains/Toolbox/apps/IDEA-C/ch-0/173.4548.28"
    } else {
        version = ideaICVersion
    }
    updateSinceUntilBuild = false
}

// https://github.com/JetBrains/gradle-intellij-plugin/blob/master/src/main/groovy/org/jetbrains/intellij/tasks/RunIdeTask.groovy
//noinspection GroovyAssignabilityCheck
task runIdeWithDifferentJvm(type: RunIdeTask) {
    jbreVersion = jbrexVersion
}

runIde {
    // where jbre can be downloaded from
    // https://dl.bintray.com/jetbrains/intellij-jdk/
    // https://dl.bintray.com/jetbrains/intellij-jdk/jbrex8u152b1136.29_osx_x64.tar.gz
    // jbreVersion "jbrex8u152b1136.29"
    // ideaDirectory "/Users/antonelpazargic/Library/Application Support/JetBrains/Toolbox/apps/IDEA-C/ch-0/173.4548.28"
}

patchPluginXml {
    changeNotes("""
        <h4>v.0.0.1</h4>
        <b>Implemented features:</b>
        <ul>
            <li><div><i>Framework detector</i></div></li>
            <li><div><i>Plugin information</i></div></li>
        </ul>
        <b>Fixed bugs:</b>
        <ul></ul>
        <b>Refactoring:</b>
        <ul>
            <li>Mer -> Merak</li>
        </ul>
        <b>Documentation:</b>
        <ul>
            <li>More structured md files</li>
        </ul>
""")
}

task wrapper(type: Wrapper) {
    gradleVersion = project.gradleVersion
    distributionType = Wrapper.DistributionType.ALL
    //    distributionUrl = "gradle-$gradleVersion-all.zip"
    distributionUrl = "http://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
}
